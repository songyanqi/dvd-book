// 第三方
import gulp from 'gulp';
import runSequence from 'run-sequence';
import liveReload from 'gulp-livereload';

// 自定义
import util from '../util.js';
import config from '../config.js';

gulp.task('default', () => {
  // 打印发布版本
  if (config.env.env) {
    if (config.env.mini) {
      console.log(`~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~发布gray||prod版(全部编译&&压缩)~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~`);
    } else {
      console.log(`~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~发布dev||beta版(全部编译&&非压缩)~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~`);
    }
  } else {
    console.log(`~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~发布本地调试版(局部编译&&非压缩)~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~`);
  }

  // 按顺序编译
  return runSequence(
    ['task_clean:dist'],
    ['task_dll'],
    ['task_js'],
    ['task_img'],
    ['task_sass'],
    ['task_html'],
    // [config.env.zip || config.env.gzip ? 'task_zip' : null],
    // [config.env.gzip ? 'task_gzip' : null],
    ['task_clean:temp'],
    function () {
      // 打印发布版本
      if (config.env.env) {
        if (config.env.mini) {
          console.log(`~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~gray||prod版发布完毕(全部编译&&压缩)~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~`);
        } else {
          console.log(`~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~dev||beta版发布完毕(全部编译&&非压缩)~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~`);
        }
      } else {
        console.log(`~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~本地调试版发布完毕(局部编译&&非压缩)~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~`);

        // 文件变化回调函数
        let changeCallback = (event) => {
          console.log(`检测到${event.path}文件发生改变，开始执行任务...`);
        };

        // 更新静态资源时间戳
        config.replacer['[[v]]'] = `?v=${util.getTimeFormatVersion()}`;

        let watchDir = `{src,node_modules/dvd-*,module,stylesheet,utils}/**`;

        // 监视img变化，触发img编译
        gulp.watch(`${watchDir}/*.{png,jpg,jpeg,gif}`, ['task_img', 'task_js', 'task_html']).on('change', changeCallback);

        // 监视sass变化，触发sass编译
        gulp.watch(`${watchDir}/*.scss`, ['task_sass', 'task_js', 'task_html']).on('change', changeCallback);

        // 监视js,vue,json变化，触发js编译
        gulp.watch(`${watchDir}/*.{js,vue,json${config.pkg.name == 'm' ? ',es6' : ''}}`, ['task_js', 'task_html']).on('change', changeCallback);

        // 监视html变化
        gulp.watch([`${watchDir}/*.{html,include}`, `node_modules/dvd-base-build/html-inc/*`], ['task_html']).on('change', changeCallback);

        // 开启liveReload服务器
        liveReload.listen();

        // 监听发布目录变化，触发liveReload自动刷新浏览器
        gulp.watch([`${config.path.dist}/**/*`], function (file) {
          liveReload.reload();
          console.log('检测到dist发生变化，已自动刷新开启liveReload的浏览器');
        });

        console.log(`>>>>>>>>>>>>>>> gulp开始监听{src,node_modules/dvd-*}目录文件变化...${util.getNow()}`);
      }
    }
  );
});
