// 第三方
import fs from 'fs';
import gulp from 'gulp';
import OSS from 'ali-oss';
import axios from 'axios';
import zip from 'gulp-zip';
import crypto from 'crypto';
import through from 'through2';
import addSrc from 'gulp-add-src';
import runtime from 'dvd-base-js-runtime';

// 自定义
import util from '../util.js';
import config from '../config.js';

// 将目录下每个文件内容拼接到一起
function calcDirContent(path) {
  let content = '';
  fs.readdirSync(path).forEach((fileName, i) => {
    let filePath = `${path}/${fileName}`;
    if (fs.statSync(filePath).isFile()) {
      let buffer = fs.readFileSync(filePath);
      content += buffer.toString();
    } else {
      content += calcDirContent(filePath);
    }
  });
  return content;
}

// 静态资源域名
let staticHost = `5e.dvmama.com`;
if (config.env.env == 'dev') {
  staticHost = `fe.bravetime.net`;
} else if (config.env.env == 'beta') {
  staticHost = `fe.vyohui.cn`;
}

// 根据这个列表拉取其他项目的hybrid信息
const projectList = ['m', 'admin', 'sm', 'act', 'book', 'story'];

/************************************ hybrid任务（打zip包、计算hybrid.json配置文件） ************************************/
gulp.task('task_hybrid', async () => {
  console.log(`>>>>>>>>>>>>>>> hybrid任务开始编译。${util.getNow()}`);

  // 当前项目hybrid配置
  let currentProjectHybridConfig = {
    remote: [],
    rules: config.pkg.hybrid.rules.map((item) => {
      return {
        reg: item.reg,
        localPath: item.localPath.replace('[[num]]', config.env.num),
      }
    }),
  };

  // admin没有遵守前后端分离目录结构规范，特殊处理
  if (config.pkg.name === 'admin') {
    // 页面很少，所有资源都打包到一起
    await (function () {
      return new Promise((resolve, reject) => {
        gulp.src(`${config.path.dist}/static/*`)
          .pipe(addSrc(`${config.path.dist}/view/*.html`))
          .pipe(zip(`all.zip`))
          .pipe(gulp.dest(`${config.path.dist}/zip`))
          .pipe(through.obj((file, enc, cb) => {
            // 总内容
            let content = '';

            // 追加静态文件内容
            content += calcDirContent(`${config.path.dist}/static`);

            // 追加html文件内容
            for (let page of config.pkg.hybrid.pages) {
              content += fs.readFileSync(`${config.path.dist}/view/${page}.html`).toString();
            }

            // 计算zip内容的md5
            let md5 = crypto.createHash('md5').update(content).digest('hex');

            // 输出zip内容的md5
            console.log(`${config.path.dist}/zip/all.zip：`, md5);

            // 写入配置文件
            currentProjectHybridConfig.remote.push({
              sourceKey: `${config.pkg.name}/static`,
              remoteUrl: `https://${staticHost}/${config.pkg.name}/static${config.env.num}/dist/zip/all.zip?${md5}`,
              localPath: `/${config.pkg.name}/static${config.env.num}/dist/static`,
              version: md5,
            });

            resolve();
          }));
      });
    })();

    // 遵守前后端分离规范的项目
  } else {
    // 针对每个页面进行zip，计算md5
    await Promise.all(config.pkg.hybrid.pages.map(item => {
      return new Promise((resolve, reject) => {
        // html路径
        let htmlPath = `${config.path.dist}/view/${item}.html`;
        if (item === 'goodsDetail') {
          htmlPath = htmlPath.replace('goodsDetail', 'goods_detail');
        }

        gulp.src(`${config.path.dist}/static/page/${item}/**/*`)
          .pipe(addSrc(htmlPath))
          .pipe(zip(`${item}.zip`))
          .pipe(gulp.dest(`${config.path.dist}/zip`))
          .pipe(through.obj((file, enc, cb) => {
            // 总内容
            let content = '';

            // 追加静态文件内容
            content += calcDirContent(`${config.path.dist}/static/page/${item}`);

            // 追加html文件内容
            content += fs.readFileSync(htmlPath).toString().replace(/common\/js\/common.js\?v=[\d\w]*/, 'common/js/common.js');

            // 计算zip内容的md5
            let md5 = crypto.createHash('md5').update(content).digest('hex');

            // 输出zip内容的md5
            console.log(`${config.path.dist}/zip/${item}.zip：`, md5);

            // 写入配置文件
            currentProjectHybridConfig.remote.push({
              sourceKey: `${config.pkg.name}/page/${item}`,
              remoteUrl: `https://${staticHost}/${config.pkg.name}/static${config.env.num}/dist/zip/${item}.zip?${md5}`,
              localPath: `/${config.pkg.name}/static${config.env.num}/dist/static/page/${item}`,
              version: md5,
            });

            resolve();
          }));
      });
    }));

    // 针对公共资源进行zip，计算md5
    await (function () {
      return new Promise((resolve, reject) => {
        gulp.src(`${config.path.dist}/static/common/**/*`)
          .pipe(zip(`common.zip`))
          .pipe(gulp.dest(`${config.path.dist}/zip`))
          .pipe(through.obj((file, enc, cb) => {
            // 总内容
            let content = calcDirContent(`${config.path.dist}/static/common`);

            // 计算zip内容的md5
            let md5 = crypto.createHash('md5').update(content).digest('hex');

            // 输出zip内容的md5
            console.log(`${config.path.dist}/zip/common.zip：`, md5);

            // 写入配置文件
            currentProjectHybridConfig.remote.push({
              sourceKey: `${config.pkg.name}/common`,
              remoteUrl: `https://${staticHost}/${config.pkg.name}/static${config.env.num}/dist/zip/common.zip?${md5}`,
              localPath: `/${config.pkg.name}/static${config.env.num}/dist/static/common`,
              version: md5,
            });

            resolve();
          }));
      });
    })();

  }

  // 输出当前项目配置
  if (!fs.existsSync('dist/zip')) {
    fs.mkdirSync('dist/zip');
  }
  fs.writeFileSync(`dist/zip/hybrid.json`, JSON.stringify(currentProjectHybridConfig, ' ', 2), {flag: 'w'});

  /*
  // 获取所有hybrid项目的配置
  let projectHybridConfigs = await Promise.all(projectList.map((project, i) => {
    return new Promise((resolve, reject) => {
      if (config.pkg.name == project) {
        console.log(`当前${project}项目hybrid配置文件为：${JSON.stringify(currentProjectHybridConfig, ' ', 2)}`);
        resolve(currentProjectHybridConfig);
      } else {
        let url = `https:${config.replacer['[[static]]']}`.replace(`/${config.pkg.name}/`, `/${project}/`).replace('/dist/static', '/dist/zip/hybrid.json');
        axios({
          method: 'get',
          url: url,
          responseType: 'json',
        }).then(res => {
          console.log(`获取${project}项目hybrid配置文件成功（${url}）：${JSON.stringify(res.data, ' ', 2)}`);
          resolve(res.data);
        }).catch((err) => {
          let defaultJson = {
            "remote": [],
            "rules": []
          };
          console.log(`获取${project}项目hybrid配置文件失败（${url}），err.message：${err.message}，\n已使用默认数据代替：${JSON.stringify(defaultJson, ' ', 2)}`);
          resolve(defaultJson);
        });
      }
    });
  }));

  // 总的hybrid配置
  let hybridConfig = {
    remoteVersion: '',
    remote: [],
    rules: [],
  };

  // 组装每个项目hybrid配置到 -> 总的hybrid配置
  projectHybridConfigs.forEach((item) => {
    hybridConfig.remote = hybridConfig.remote.concat(item.remote);
    hybridConfig.rules = hybridConfig.rules.concat(item.rules);
  });

  // 通用的规则
  hybridConfig.rules = hybridConfig.rules.concat([
    {
      "reg": "([^/]+)/(.+)\.html",
      "localPath": `/$1/dist/static${config.env.num}/page/$2/$2.html`
    },
    {
      "reg": `${staticHost}/([^/]+/static${config.env.num}.*)`,
      "localPath": "/$1",
    }
  ]);

  // 计算总的hybrid配置md5
  hybridConfig.remoteVersion = crypto.createHash('md5').update(JSON.stringify(hybridConfig)).digest('hex');

  // 总的hybrid配置字符串
  let totalJsonStr = JSON.stringify(hybridConfig, ' ', 2);


  // 输出总的hybrid配置字符串
  console.log(`最终总的hybrid资源清单如下：${totalJsonStr}`);

  // 上传总的hybrid配置 -> OSS (只在服务器发布时生效)
  if (runtime.isLinux()) {
    let client = new OSS({
      region: 'oss-cn-beijing',
      bucket: 'static-resource-oss',
      // 凯强新建子账号
      accessKeyId: 'LTAITipazbYIRzeA',
      accessKeySecret: '3tsSyCUZkvenolzeBMI2QKu7Gwgibb',
    });

    // 上传
    let response = await client.put(`hybrid2/${config.env.env}/config${config.env.num}.json`, new Buffer(totalJsonStr));

    // 输出总的hybrid配置上传后的地址
    console.log(`上传成功！：${response.url.replace('http://', 'https://').replace('static-resource-oss.oss-cn-beijing.aliyuncs.com', '5t.dvmama.com')}`);
  }

  */

});
