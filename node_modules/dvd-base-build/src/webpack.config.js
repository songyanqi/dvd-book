// 第三方
import fs from 'fs';
import path from 'path';
import glob from 'glob';
import webpack from 'webpack';
import merge from 'webpack-merge';
import vuxLoader from 'vux-loader';
import autoprefixer from 'autoprefixer';
import VueSSRClientPlugin from 'vue-server-renderer/client-plugin';

// 自定义
import config from './config.js';

let json = merge(require('./webpack.base.config').default, {
  entry: function () {
    let entry = {};

    // 设置编译入口
    glob.sync(`${__dirname}/../../../${config.path.js}`).forEach(function (filePath) {
      // 根据js路径获取信息
      let result = /src[/](page[/](.*)[/]js[/](.*))[.]js/.exec(filePath);

      // js文件名
      let jsDirName = result[2];
      // js父级目录名
      let jsFileName = result[3];

      if (config.env.ssr) {
        // 只编译文件名和目录名相同的js
        if (`${jsDirName}-client` === jsFileName) {
          // 打包入口
          let entryName = result[1];
          // 入口文件路径
          let entryPath = `./src/${entryName}.js`;
          // 设置入口
          entry[entryName] = entryPath;
        }
      } else {
        // 只编译文件名和目录名相同的js
        if (jsDirName === jsFileName) {
          // 打包入口
          let entryName = result[1];
          // 入口文件路径
          let entryPath = `./src/${entryName}.js`;
          // 设置入口
          entry[entryName] = entryPath;
        }
      }
    });

    // 检测入口数量，打印出入口
    console.log('webpack入口:');
    let entryCount = 0;
    for (let i in entry) {
      console.log(`${i}: ${entry[i]}`);
      entryCount++;
    }
    if (entryCount <= 0) {
      throw Error('webpack入口js数量为0，请检查developer.config.js配置目录名是否正确。');
    }

    console.log(`正在编译js...`);

    return entry;
  }(),
  output: {
    filename: '[name].js',
    chunkFilename: '[name].[chunkhash:10].js',
    publicPath: `${config.replacer['[[static]]']}/`,
  },
  plugins: function () {
    let arr = [];

    // 全局变量替换
    // arr.push(new webpack.DefinePlugin({
    //   PRODUCTION: JSON.stringify(true),
    //   sss: JSON.stringify(true),
    //   '[[sss]]': JSON.stringify(true),
    //   VERSION: JSON.stringify("5fa3b9"),
    //   BROWSER_SUPPORTS_HTML5: true,
    //   TWO: "1+1",
    //   "typeof window": JSON.stringify("object")
    // }));

    // arr.push(new webpack.ContextReplacementPlugin(
    //   'bbb': 'wefwefwef',
    //   // newContentResource?: string,
    //   // newContentRecursive?: boolean,
    //   // newContentRegExp?: RegExp
    // ));

    // arr.push(new TextReplacePlugin());

    // 公共js提取
    if (config.env.env) {
      // 提取公共js
      arr.push(new webpack.optimize.CommonsChunkPlugin({
        name: "common",
        filename: 'common/js/common.js',
        minChunks: 5,
      }));
    }

    // 读取dll信息
    let dllJsonPath = config.env.env ? `./dll/vendor.dll.min.json` : `./dll/vendor.dll.json`;
    let dllJson = require(dllJsonPath);
    // console.log(`dllJson(${dllJsonPath})内容如下: `);
    // console.log(JSON.stringify(dllJson, ' ', 2));

    // 读取dll信息
    arr.push(new webpack.DllReferencePlugin({
      context: `${__dirname}/../../../`,
      manifest: dllJson,
    }));

    // 此插件在输出目录中
    // 生成 `vue-ssr-client-manifest.json`。
    if (config.env.ssr) {
      if (config.env.mini) {
        arr.push(new webpack.optimize.UglifyJsPlugin());
      }
      arr.push(new VueSSRClientPlugin());
    }

    return arr;
  }(),
  externals: {
    // 'vue': 'window.Vue',
    // 'vuex': 'window.Vuex',
    // 'jquery': 'window.$',
    // '$': 'window.$',
    // 'vue-lazyload': 'window.VueLazyload',
    // 'swiper': 'window.Swiper',
    // 'vue-router': 'window.VueRouter',
    'vconsole': 'window.VConsole',
    'babel-polyfill': 'window._babelPolyfill',
    'ali-oss': 'window.OSS',
  },
});

export default json;
