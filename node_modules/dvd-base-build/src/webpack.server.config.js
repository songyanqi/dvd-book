// 第三方
import fs from 'fs';
import path from 'path';
import glob from 'glob';
import webpack from 'webpack';
import merge from 'webpack-merge';
import vuxLoader from 'vux-loader';
import autoprefixer from 'autoprefixer';
import nodeExternals from 'webpack-node-externals';
import VueSSRServerPlugin from 'vue-server-renderer/server-plugin';
// 自定义
import config from './config.js';

// 字符替换loader，替换全局环境变量
let replaceLoader = {
  loader: path.resolve(`${__dirname}/loader/replace-loader.js`),
  options: {
    replacer: (function () {
      let replacer = Object.assign({}, config.replacer);
      delete replacer.regex;
      return replacer;
    })(),
  },
};

let mergeObj = merge(require('./webpack.base.config.js').default, {
  // 将 entry 指向应用程序的 server entry 文件
  entry: function () {
    let entry = {};

    // 设置编译入口
    glob.sync(`${__dirname}/../../../${config.path.js}`).forEach(function (filePath) {
      // 根据js路径获取信息
      let result = /src[/](page[/](.*)[/]js[/](.*))[.]js/.exec(filePath);

      // js文件名
      let jsDirName = result[2];
      // js父级目录名
      let jsFileName = result[3];

      // 只编译文件名和目录名相同的js
      if (`${jsDirName}-server` === jsFileName) {
        // 打包入口
        let entryName = result[1];
        // 入口文件路径
        let entryPath = `./src/${entryName}.js`;
        // 设置入口
        entry[entryName] = entryPath;
      }
    });

    // 检测入口数量，打印出入口
    console.log('webpack入口:');
    let entryCount = 0;
    for (let i in entry) {
      console.log(`${i}: ${entry[i]}`);
      entryCount++;
    }
    if (entryCount <= 0) {
      throw Error('webpack入口js数量为0，请检查developer.config.js配置目录名是否正确。');
    }

    console.log(`正在编译js...`);

    return entry;
  }(),

  // 这允许 webpack 以 Node 适用方式(Node-appropriate fashion)处理动态导入(dynamic import)，
  // 并且还会在编译 Vue 组件时，
  // 告知 `vue-loader` 输送面向服务器代码(server-oriented code)。
  target: 'node',

  // https://webpack.js.org/configuration/externals/#function
  // https://github.com/liady/webpack-node-externals
  // 外置化应用程序依赖模块。可以使服务器构建速度更快，
  // 并生成较小的 bundle 文件。
  // 外置的模块将不会被预处理
  externals: nodeExternals({
    // 不要外置化 webpack 需要处理的依赖模块。
    // 你可以在、这里添加更多的文件类型。例如，未处理 *.vue 原始文件，
    // 你还应该将修改 `global`（例如 polyfill）的依赖模块列入白名单
    whitelist: [/^dvd-/],
  }),

  // 对 bundle renderer 提供 source map 支持
  devtool: 'source-map',

  // 此处告知 server bundle 使用 Node 风格导出模块(Node-style exports)
  output: {
    libraryTarget: 'commonjs2',
    filename: '[name].js',
  },

  // 这是将服务器的整个输出
  // 构建为单个 JSON 文件的插件。
  // 默认文件名为 `vue-ssr-server-bundle.json`
  plugins: [
    new VueSSRServerPlugin()
  ],
});

export default mergeObj;
