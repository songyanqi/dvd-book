// 第三方模块
import Vue from 'vue';
import $ from 'jquery';
import Swiper from 'swiper';

// H5项目间通用模块
import ua from 'dvd-base-js-ua';
import tj from 'dvd-service-js-tj';
import type from 'dvd-base-js-type';
import date from 'dvd-base-js-date';
import param from 'dvd-base-js-param';
import cache from 'dvd-base-js-cache';
import util from 'dvd-service-js-util';
import popup from 'dvd-service-js-popup';
import login from 'dvd-service-js-login';
import share from 'dvd-service-js-share';
import native from 'dvd-service-js-native';
import encrypt from 'dvd-service-js-encrypt';
import pageScrollPosition from 'dvd-base-js-page-scroll-position';

// 当前页面组件
export default {
  components: {
    'dvd-service-com-title': require('dvd-service-com-title').default,
    'dvd-service-com-go-page-top': require('dvd-service-com-go-page-top').default,
  },
  data() {
    return {
      // 全局属性
      window,
      document,
      location,

      // H5项目间通用模块
      ua,
      popup,
      param,

      // 首屏返回数据
      response: null,

      // 组件间属性
      store: {
        bus: new Vue(),
      },
    };
  },
  computed: {},
  beforeRouteEnter(to, from, next) {
    // 获取首屏数据
    getData(next);
  },
  beforeCreate() {
  },
  created() {
  },
  mounted() {
  },
  beforeRouteLeave(to, from, next) {
    // 滚动位置
    pageScrollPosition.destory();
    next();
  },
  // 组件销毁前一定要撤销自己注册的事件，否则容易造成内存泄漏。这是spa最关键的事情
  beforeDestroy() {
  },
  destroyed() {
  },
  watch: {
    // 监听response变化
    response() {
      // response变化后并渲染完dom,设置其他事项
      this.$nextTick(function () {
        let ts = this;

        // 滚动位置
        pageScrollPosition.init();
        // pageScrollPosition.autoSave();

        // 设置分享信息
        try {
          if (!ts.response || !ts.response.data) {
            share.setShareInfo({
              title: ts.response.data.shareTitle,
              desc: ts.response.data.shareDesc,
              link: location.href,
              imgUrl: ts.response.data.shareImg,
            }, ts.response);
          }
        } catch (err) {
          console.error(err);
        }
      });
    },
  },
  filters: {},
  methods: {
    /*// 统计
     tj(action_type){
     tj.send({
     production: 24,
     action: 1,
     action_type: action_type,
     });
     },*/
  },
};

/**
 * 方法功能：获取首屏数据
 * 接口名称：小书库首页－第一屏协议
 * 接口文档：http://wiki.bravetime.net/pages/viewpage.action?pageId=19628496
 */
function getData(next) {
  let ts = this;
  $.ajax({
    cache: false,
    async: true,
    url: '?_=' + Date.now(),
    type: 'post',
    dataType: 'json',
    data: encrypt.ajax({
      // js_wx_info: 1,
    }),
    success(response) {
      let callback = function (response) {
        try {
          if (response.code === 0) {

          }
        } catch (err) {
          // 这个try-catch不要去掉，因为有异常时会阻止强制跳转
        }
      };

      // 如果有next，代表router进入页面前调用；否则为页面内调用
      next ? next(function (ts) {
        callback.call(ts, response);
      }) : callback.call(ts, response);
    },
    error(error) {
      // 只有本地调试版本才能使用mock数据
      if (!'[[env]]') {
        console.error(`ajax已执行error回调方法: url=${this.url}, reason=${error.status} ${error.statusText} `);
        this.success(require('../json/{{name}}.json'));
        console.warn(`ajax已使用mock数据: url=${this.url}, mock={{name}}.json`);
      }
    },
  });
  // return deferred;
}
