'use strict';

var _gulp = require('gulp');

var _gulp2 = _interopRequireDefault(_gulp);

var _gulpSize = require('gulp-size');

var _gulpSize2 = _interopRequireDefault(_gulpSize);

var _webpack = require('webpack');

var _webpack2 = _interopRequireDefault(_webpack);

var _swgGulpRev = require('swg-gulp-rev');

var _swgGulpRev2 = _interopRequireDefault(_swgGulpRev);

var _gulpEslint = require('gulp-eslint');

var _gulpEslint2 = _interopRequireDefault(_gulpEslint);

var _gulpUglify = require('gulp-uglify');

var _gulpUglify2 = _interopRequireDefault(_gulpUglify);

var _gulpReplace = require('gulp-replace');

var _gulpReplace2 = _interopRequireDefault(_gulpReplace);

var _webpackStream = require('webpack-stream');

var _webpackStream2 = _interopRequireDefault(_webpackStream);

var _util = require('../util.js');

var _util2 = _interopRequireDefault(_util);

var _config = require('../config.js');

var _config2 = _interopRequireDefault(_config);

var _eslintrc = require('../eslintrc.js');

var _eslintrc2 = _interopRequireDefault(_eslintrc);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/************************************ 构建JS任务 ************************************/
_gulp2.default.task('task_js', function () {
  console.log('>>>>>>>>>>>>>>> js\u6587\u4EF6\u5F00\u59CB\u7F16\u8BD1\u3002' + _util2.default.getNow());

  var webpackConfig = require('../webpack.config.js').default;

  return _gulp2.default.src(_config2.default.path.js)

  // eslint语法校验
  .pipe(!_config2.default.env.env ? (0, _gulpEslint2.default)(_eslintrc2.default) : _util2.default.gulpNothing()).pipe(!_config2.default.env.env ? _gulpEslint2.default.format() : _util2.default.gulpNothing())

  // webpack编译js
  .pipe((0, _webpackStream2.default)(webpackConfig, _webpack2.default, function (err, stats) {}))

  // 替换全局环境变量，对vue和js不生效因为编译后会破坏变量，目前只给vue中引用的scss使用
  .pipe((0, _gulpReplace2.default)(_config2.default.replacer.regex, function (match) {
    return _config2.default.replacer[match];
  }))

  // js压缩混淆
  .pipe(_config2.default.env.mini && !_config2.default.env.ssr ? (0, _gulpUglify2.default)() : _util2.default.gulpNothing())

  // 发布时去掉严格模式适应更多机型，开发时保留以督促开发人员使用标准的写法。（目前查到安卓5.1上使用了"use strict";的部分页面会语法错误，比如一个对象存在多个同名属性）
  // .pipe(config.env.env ? replace('"use strict";', '') : util.gulpNothing())
  .pipe((0, _gulpReplace2.default)('"use strict";', '')).pipe((0, _gulpReplace2.default)("'use strict;'", ''))

  // 显示编译后js文件体积
  .pipe((0, _gulpSize2.default)({ showFiles: true }))

  // 收集js文件的MD5值
  .pipe(_config2.default.env.mini ? (0, _swgGulpRev2.default)() : _util2.default.gulpNothing())

  // 输出js文件
  .pipe(_gulp2.default.dest(_config2.default.path.static))

  // 输出js文件与MD5值匹配关系的文件
  .pipe(_config2.default.env.mini ? _swgGulpRev2.default.manifest('rev-md5/js.json') : _util2.default.gulpNothing()).pipe(_config2.default.env.mini ? _gulp2.default.dest(_config2.default.path.temp) : _util2.default.gulpNothing());
});

// 自定义
// 第三方