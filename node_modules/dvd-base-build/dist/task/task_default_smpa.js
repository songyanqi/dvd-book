'use strict';

var _gulp = require('gulp');

var _gulp2 = _interopRequireDefault(_gulp);

var _runSequence = require('run-sequence');

var _runSequence2 = _interopRequireDefault(_runSequence);

var _gulpLivereload = require('gulp-livereload');

var _gulpLivereload2 = _interopRequireDefault(_gulpLivereload);

var _util = require('../util.js');

var _util2 = _interopRequireDefault(_util);

var _config = require('../config.js');

var _config2 = _interopRequireDefault(_config);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

// 自定义
_gulp2.default.task('default', function () {
  // 打印发布版本
  if (_config2.default.env.env) {
    if (_config2.default.env.mini) {
      console.log('~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\u53D1\u5E03gray||prod\u7248(\u5168\u90E8\u7F16\u8BD1&&\u538B\u7F29)~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~');
    } else {
      console.log('~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\u53D1\u5E03dev||beta\u7248(\u5168\u90E8\u7F16\u8BD1&&\u975E\u538B\u7F29)~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~');
    }
  } else {
    console.log('~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\u53D1\u5E03\u672C\u5730\u8C03\u8BD5\u7248(\u5C40\u90E8\u7F16\u8BD1&&\u975E\u538B\u7F29)~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~');
  }

  // 按顺序编译
  return (0, _runSequence2.default)(['task_clean:dist'], ['task_dll'], ['task_js'], ['task_img'], ['task_sass'], ['task_html'],
  // [config.env.zip || config.env.gzip ? 'task_zip' : null],
  // [config.env.gzip ? 'task_gzip' : null],
  ['task_clean:temp'], function () {
    // 打印发布版本
    if (_config2.default.env.env) {
      if (_config2.default.env.mini) {
        console.log('~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~gray||prod\u7248\u53D1\u5E03\u5B8C\u6BD5(\u5168\u90E8\u7F16\u8BD1&&\u538B\u7F29)~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~');
      } else {
        console.log('~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~dev||beta\u7248\u53D1\u5E03\u5B8C\u6BD5(\u5168\u90E8\u7F16\u8BD1&&\u975E\u538B\u7F29)~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~');
      }
    } else {
      console.log('~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\u672C\u5730\u8C03\u8BD5\u7248\u53D1\u5E03\u5B8C\u6BD5(\u5C40\u90E8\u7F16\u8BD1&&\u975E\u538B\u7F29)~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~');

      // 文件变化回调函数
      var changeCallback = function changeCallback(event) {
        console.log('\u68C0\u6D4B\u5230' + event.path + '\u6587\u4EF6\u53D1\u751F\u6539\u53D8\uFF0C\u5F00\u59CB\u6267\u884C\u4EFB\u52A1...');
      };

      // 更新静态资源时间戳
      _config2.default.replacer['[[v]]'] = '?v=' + _util2.default.getTimeFormatVersion();

      var watchDir = '{src,node_modules/dvd-*,module,stylesheet,utils}/**';

      // 监视img变化，触发img编译
      _gulp2.default.watch(watchDir + '/*.{png,jpg,jpeg,gif}', ['task_img', 'task_js', 'task_html']).on('change', changeCallback);

      // 监视sass变化，触发sass编译
      _gulp2.default.watch(watchDir + '/*.scss', ['task_sass', 'task_js', 'task_html']).on('change', changeCallback);

      // 监视js,vue,json变化，触发js编译
      _gulp2.default.watch(watchDir + '/*.{js,vue,json' + (_config2.default.pkg.name == 'm' ? ',es6' : '') + '}', ['task_js', 'task_html']).on('change', changeCallback);

      // 监视html变化
      _gulp2.default.watch([watchDir + '/*.{html,include}', 'node_modules/dvd-base-build/html-inc/*'], ['task_html']).on('change', changeCallback);

      // 开启liveReload服务器
      _gulpLivereload2.default.listen();

      // 监听发布目录变化，触发liveReload自动刷新浏览器
      _gulp2.default.watch([_config2.default.path.dist + '/**/*'], function (file) {
        _gulpLivereload2.default.reload();
        console.log('检测到dist发生变化，已自动刷新开启liveReload的浏览器');
      });

      console.log('>>>>>>>>>>>>>>> gulp\u5F00\u59CB\u76D1\u542C{src,node_modules/dvd-*}\u76EE\u5F55\u6587\u4EF6\u53D8\u5316...' + _util2.default.getNow());
    }
  });
}); // 第三方