'use strict';

var _regenerator = require('babel-runtime/regenerator');

var _regenerator2 = _interopRequireDefault(_regenerator);

var _fs = require('fs');

var _fs2 = _interopRequireDefault(_fs);

var _gulp = require('gulp');

var _gulp2 = _interopRequireDefault(_gulp);

var _aliOss = require('ali-oss');

var _aliOss2 = _interopRequireDefault(_aliOss);

var _axios = require('axios');

var _axios2 = _interopRequireDefault(_axios);

var _gulpZip = require('gulp-zip');

var _gulpZip2 = _interopRequireDefault(_gulpZip);

var _crypto = require('crypto');

var _crypto2 = _interopRequireDefault(_crypto);

var _through = require('through2');

var _through2 = _interopRequireDefault(_through);

var _gulpAddSrc = require('gulp-add-src');

var _gulpAddSrc2 = _interopRequireDefault(_gulpAddSrc);

var _dvdBaseJsRuntime = require('dvd-base-js-runtime');

var _dvdBaseJsRuntime2 = _interopRequireDefault(_dvdBaseJsRuntime);

var _util = require('../util.js');

var _util2 = _interopRequireDefault(_util);

var _config = require('../config.js');

var _config2 = _interopRequireDefault(_config);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _asyncToGenerator(fn) { return function () { var gen = fn.apply(this, arguments); return new Promise(function (resolve, reject) { function step(key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { return Promise.resolve(value).then(function (value) { step("next", value); }, function (err) { step("throw", err); }); } } return step("next"); }); }; } // 第三方


// 自定义


// 将目录下每个文件内容拼接到一起
function calcDirContent(path) {
  var content = '';
  _fs2.default.readdirSync(path).forEach(function (fileName, i) {
    var filePath = path + '/' + fileName;
    if (_fs2.default.statSync(filePath).isFile()) {
      var buffer = _fs2.default.readFileSync(filePath);
      content += buffer.toString();
    } else {
      content += calcDirContent(filePath);
    }
  });
  return content;
}

// 静态资源域名
var staticHost = '5e.dvmama.com';
if (_config2.default.env.env == 'dev') {
  staticHost = 'fe.bravetime.net';
} else if (_config2.default.env.env == 'beta') {
  staticHost = 'fe.vyohui.cn';
}

// 根据这个列表拉取其他项目的hybrid信息
var projectList = ['m', 'admin', 'sm', 'act', 'book', 'story'];

/************************************ hybrid任务（打zip包、计算hybrid.json配置文件） ************************************/
_gulp2.default.task('task_hybrid', _asyncToGenerator( /*#__PURE__*/_regenerator2.default.mark(function _callee() {
  var currentProjectHybridConfig;
  return _regenerator2.default.wrap(function _callee$(_context) {
    while (1) {
      switch (_context.prev = _context.next) {
        case 0:
          console.log('>>>>>>>>>>>>>>> hybrid\u4EFB\u52A1\u5F00\u59CB\u7F16\u8BD1\u3002' + _util2.default.getNow());

          // 当前项目hybrid配置
          currentProjectHybridConfig = {
            remote: [],
            rules: _config2.default.pkg.hybrid.rules.map(function (item) {
              return {
                reg: item.reg,
                localPath: item.localPath.replace('[[num]]', _config2.default.env.num)
              };
            })
          };

          // admin没有遵守前后端分离目录结构规范，特殊处理

          if (!(_config2.default.pkg.name === 'admin')) {
            _context.next = 7;
            break;
          }

          _context.next = 5;
          return function () {
            return new Promise(function (resolve, reject) {
              _gulp2.default.src(_config2.default.path.dist + '/static/*').pipe((0, _gulpAddSrc2.default)(_config2.default.path.dist + '/view/*.html')).pipe((0, _gulpZip2.default)('all.zip')).pipe(_gulp2.default.dest(_config2.default.path.dist + '/zip')).pipe(_through2.default.obj(function (file, enc, cb) {
                // 总内容
                var content = '';

                // 追加静态文件内容
                content += calcDirContent(_config2.default.path.dist + '/static');

                // 追加html文件内容
                var _iteratorNormalCompletion = true;
                var _didIteratorError = false;
                var _iteratorError = undefined;

                try {
                  for (var _iterator = _config2.default.pkg.hybrid.pages[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
                    var page = _step.value;

                    content += _fs2.default.readFileSync(_config2.default.path.dist + '/view/' + page + '.html').toString();
                  }

                  // 计算zip内容的md5
                } catch (err) {
                  _didIteratorError = true;
                  _iteratorError = err;
                } finally {
                  try {
                    if (!_iteratorNormalCompletion && _iterator.return) {
                      _iterator.return();
                    }
                  } finally {
                    if (_didIteratorError) {
                      throw _iteratorError;
                    }
                  }
                }

                var md5 = _crypto2.default.createHash('md5').update(content).digest('hex');

                // 输出zip内容的md5
                console.log(_config2.default.path.dist + '/zip/all.zip\uFF1A', md5);

                // 写入配置文件
                currentProjectHybridConfig.remote.push({
                  sourceKey: _config2.default.pkg.name + '/static',
                  remoteUrl: 'https://' + staticHost + '/' + _config2.default.pkg.name + '/static' + _config2.default.env.num + '/dist/zip/all.zip?' + md5,
                  localPath: '/' + _config2.default.pkg.name + '/static' + _config2.default.env.num + '/dist/static',
                  version: md5
                });

                resolve();
              }));
            });
          }();

        case 5:
          _context.next = 11;
          break;

        case 7:
          _context.next = 9;
          return Promise.all(_config2.default.pkg.hybrid.pages.map(function (item) {
            return new Promise(function (resolve, reject) {
              // html路径
              var htmlPath = _config2.default.path.dist + '/view/' + item + '.html';
              if (item === 'goodsDetail') {
                htmlPath = htmlPath.replace('goodsDetail', 'goods_detail');
              }

              _gulp2.default.src(_config2.default.path.dist + '/static/page/' + item + '/**/*').pipe((0, _gulpAddSrc2.default)(htmlPath)).pipe((0, _gulpZip2.default)(item + '.zip')).pipe(_gulp2.default.dest(_config2.default.path.dist + '/zip')).pipe(_through2.default.obj(function (file, enc, cb) {
                // 总内容
                var content = '';

                // 追加静态文件内容
                content += calcDirContent(_config2.default.path.dist + '/static/page/' + item);

                // 追加html文件内容
                content += _fs2.default.readFileSync(htmlPath).toString().replace(/common\/js\/common.js\?v=[\d\w]*/, 'common/js/common.js');

                // 计算zip内容的md5
                var md5 = _crypto2.default.createHash('md5').update(content).digest('hex');

                // 输出zip内容的md5
                console.log(_config2.default.path.dist + '/zip/' + item + '.zip\uFF1A', md5);

                // 写入配置文件
                currentProjectHybridConfig.remote.push({
                  sourceKey: _config2.default.pkg.name + '/page/' + item,
                  remoteUrl: 'https://' + staticHost + '/' + _config2.default.pkg.name + '/static' + _config2.default.env.num + '/dist/zip/' + item + '.zip?' + md5,
                  localPath: '/' + _config2.default.pkg.name + '/static' + _config2.default.env.num + '/dist/static/page/' + item,
                  version: md5
                });

                resolve();
              }));
            });
          }));

        case 9:
          _context.next = 11;
          return function () {
            return new Promise(function (resolve, reject) {
              _gulp2.default.src(_config2.default.path.dist + '/static/common/**/*').pipe((0, _gulpZip2.default)('common.zip')).pipe(_gulp2.default.dest(_config2.default.path.dist + '/zip')).pipe(_through2.default.obj(function (file, enc, cb) {
                // 总内容
                var content = calcDirContent(_config2.default.path.dist + '/static/common');

                // 计算zip内容的md5
                var md5 = _crypto2.default.createHash('md5').update(content).digest('hex');

                // 输出zip内容的md5
                console.log(_config2.default.path.dist + '/zip/common.zip\uFF1A', md5);

                // 写入配置文件
                currentProjectHybridConfig.remote.push({
                  sourceKey: _config2.default.pkg.name + '/common',
                  remoteUrl: 'https://' + staticHost + '/' + _config2.default.pkg.name + '/static' + _config2.default.env.num + '/dist/zip/common.zip?' + md5,
                  localPath: '/' + _config2.default.pkg.name + '/static' + _config2.default.env.num + '/dist/static/common',
                  version: md5
                });

                resolve();
              }));
            });
          }();

        case 11:

          // 输出当前项目配置
          if (!_fs2.default.existsSync('dist/zip')) {
            _fs2.default.mkdirSync('dist/zip');
          }
          _fs2.default.writeFileSync('dist/zip/hybrid.json', JSON.stringify(currentProjectHybridConfig, ' ', 2), { flag: 'w' });

          /*
          // 获取所有hybrid项目的配置
          let projectHybridConfigs = await Promise.all(projectList.map((project, i) => {
            return new Promise((resolve, reject) => {
              if (config.pkg.name == project) {
                console.log(`当前${project}项目hybrid配置文件为：${JSON.stringify(currentProjectHybridConfig, ' ', 2)}`);
                resolve(currentProjectHybridConfig);
              } else {
                let url = `https:${config.replacer['[[static]]']}`.replace(`/${config.pkg.name}/`, `/${project}/`).replace('/dist/static', '/dist/zip/hybrid.json');
                axios({
                  method: 'get',
                  url: url,
                  responseType: 'json',
                }).then(res => {
                  console.log(`获取${project}项目hybrid配置文件成功（${url}）：${JSON.stringify(res.data, ' ', 2)}`);
                  resolve(res.data);
                }).catch((err) => {
                  let defaultJson = {
                    "remote": [],
                    "rules": []
                  };
                  console.log(`获取${project}项目hybrid配置文件失败（${url}），err.message：${err.message}，\n已使用默认数据代替：${JSON.stringify(defaultJson, ' ', 2)}`);
                  resolve(defaultJson);
                });
              }
            });
          }));
           // 总的hybrid配置
          let hybridConfig = {
            remoteVersion: '',
            remote: [],
            rules: [],
          };
           // 组装每个项目hybrid配置到 -> 总的hybrid配置
          projectHybridConfigs.forEach((item) => {
            hybridConfig.remote = hybridConfig.remote.concat(item.remote);
            hybridConfig.rules = hybridConfig.rules.concat(item.rules);
          });
           // 通用的规则
          hybridConfig.rules = hybridConfig.rules.concat([
            {
              "reg": "([^/]+)/(.+)\.html",
              "localPath": `/$1/dist/static${config.env.num}/page/$2/$2.html`
            },
            {
              "reg": `${staticHost}/([^/]+/static${config.env.num}.*)`,
              "localPath": "/$1",
            }
          ]);
           // 计算总的hybrid配置md5
          hybridConfig.remoteVersion = crypto.createHash('md5').update(JSON.stringify(hybridConfig)).digest('hex');
           // 总的hybrid配置字符串
          let totalJsonStr = JSON.stringify(hybridConfig, ' ', 2);
            // 输出总的hybrid配置字符串
          console.log(`最终总的hybrid资源清单如下：${totalJsonStr}`);
           // 上传总的hybrid配置 -> OSS (只在服务器发布时生效)
          if (runtime.isLinux()) {
            let client = new OSS({
              region: 'oss-cn-beijing',
              bucket: 'static-resource-oss',
              // 凯强新建子账号
              accessKeyId: 'LTAITipazbYIRzeA',
              accessKeySecret: '3tsSyCUZkvenolzeBMI2QKu7Gwgibb',
            });
             // 上传
            let response = await client.put(`hybrid2/${config.env.env}/config${config.env.num}.json`, new Buffer(totalJsonStr));
             // 输出总的hybrid配置上传后的地址
            console.log(`上传成功！：${response.url.replace('http://', 'https://').replace('static-resource-oss.oss-cn-beijing.aliyuncs.com', '5t.dvmama.com')}`);
          }
           */

        case 13:
        case 'end':
          return _context.stop();
      }
    }
  }, _callee, undefined);
})));