'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _fs = require('fs');

var _fs2 = _interopRequireDefault(_fs);

var _path = require('path');

var _path2 = _interopRequireDefault(_path);

var _glob = require('glob');

var _glob2 = _interopRequireDefault(_glob);

var _webpack = require('webpack');

var _webpack2 = _interopRequireDefault(_webpack);

var _webpackMerge = require('webpack-merge');

var _webpackMerge2 = _interopRequireDefault(_webpackMerge);

var _vuxLoader = require('vux-loader');

var _vuxLoader2 = _interopRequireDefault(_vuxLoader);

var _autoprefixer = require('autoprefixer');

var _autoprefixer2 = _interopRequireDefault(_autoprefixer);

var _clientPlugin = require('vue-server-renderer/client-plugin');

var _clientPlugin2 = _interopRequireDefault(_clientPlugin);

var _config = require('./config.js');

var _config2 = _interopRequireDefault(_config);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var json = (0, _webpackMerge2.default)(require('./webpack.base.config').default, {
  entry: function () {
    var entry = {};

    // 设置编译入口
    _glob2.default.sync(__dirname + '/../../../' + _config2.default.path.js).forEach(function (filePath) {
      // 根据js路径获取信息
      var result = /src[/](page[/](.*)[/]js[/](.*))[.]js/.exec(filePath);

      // js文件名
      var jsDirName = result[2];
      // js父级目录名
      var jsFileName = result[3];

      if (_config2.default.env.ssr) {
        // 只编译文件名和目录名相同的js
        if (jsDirName + '-client' === jsFileName) {
          // 打包入口
          var entryName = result[1];
          // 入口文件路径
          var entryPath = './src/' + entryName + '.js';
          // 设置入口
          entry[entryName] = entryPath;
        }
      } else {
        // 只编译文件名和目录名相同的js
        if (jsDirName === jsFileName) {
          // 打包入口
          var _entryName = result[1];
          // 入口文件路径
          var _entryPath = './src/' + _entryName + '.js';
          // 设置入口
          entry[_entryName] = _entryPath;
        }
      }
    });

    // 检测入口数量，打印出入口
    console.log('webpack入口:');
    var entryCount = 0;
    for (var i in entry) {
      console.log(i + ': ' + entry[i]);
      entryCount++;
    }
    if (entryCount <= 0) {
      throw Error('webpack入口js数量为0，请检查developer.config.js配置目录名是否正确。');
    }

    console.log('\u6B63\u5728\u7F16\u8BD1js...');

    return entry;
  }(),
  output: {
    filename: '[name].js',
    chunkFilename: '[name].[chunkhash:10].js',
    publicPath: _config2.default.replacer['[[static]]'] + '/'
  },
  plugins: function () {
    var arr = [];

    // 全局变量替换
    // arr.push(new webpack.DefinePlugin({
    //   PRODUCTION: JSON.stringify(true),
    //   sss: JSON.stringify(true),
    //   '[[sss]]': JSON.stringify(true),
    //   VERSION: JSON.stringify("5fa3b9"),
    //   BROWSER_SUPPORTS_HTML5: true,
    //   TWO: "1+1",
    //   "typeof window": JSON.stringify("object")
    // }));

    // arr.push(new webpack.ContextReplacementPlugin(
    //   'bbb': 'wefwefwef',
    //   // newContentResource?: string,
    //   // newContentRecursive?: boolean,
    //   // newContentRegExp?: RegExp
    // ));

    // arr.push(new TextReplacePlugin());

    // 公共js提取
    if (_config2.default.env.env) {
      // 提取公共js
      arr.push(new _webpack2.default.optimize.CommonsChunkPlugin({
        name: "common",
        filename: 'common/js/common.js',
        minChunks: 5
      }));
    }

    // 读取dll信息
    var dllJsonPath = _config2.default.env.env ? './dll/vendor.dll.min.json' : './dll/vendor.dll.json';
    var dllJson = require(dllJsonPath);
    // console.log(`dllJson(${dllJsonPath})内容如下: `);
    // console.log(JSON.stringify(dllJson, ' ', 2));

    // 读取dll信息
    arr.push(new _webpack2.default.DllReferencePlugin({
      context: __dirname + '/../../../',
      manifest: dllJson
    }));

    // 此插件在输出目录中
    // 生成 `vue-ssr-client-manifest.json`。
    if (_config2.default.env.ssr) {
      if (_config2.default.env.mini) {
        arr.push(new _webpack2.default.optimize.UglifyJsPlugin());
      }
      arr.push(new _clientPlugin2.default());
    }

    return arr;
  }(),
  externals: {
    // 'vue': 'window.Vue',
    // 'vuex': 'window.Vuex',
    // 'jquery': 'window.$',
    // '$': 'window.$',
    // 'vue-lazyload': 'window.VueLazyload',
    // 'swiper': 'window.Swiper',
    // 'vue-router': 'window.VueRouter',
    'vconsole': 'window.VConsole',
    'babel-polyfill': 'window._babelPolyfill',
    'ali-oss': 'window.OSS'
  }
});

// 自定义
// 第三方
exports.default = json;