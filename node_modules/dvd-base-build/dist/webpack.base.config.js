'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; // 第三方


// 自定义


var _fs = require('fs');

var _fs2 = _interopRequireDefault(_fs);

var _path = require('path');

var _path2 = _interopRequireDefault(_path);

var _glob = require('glob');

var _glob2 = _interopRequireDefault(_glob);

var _webpack = require('webpack');

var _webpack2 = _interopRequireDefault(_webpack);

var _vuxLoader = require('vux-loader');

var _vuxLoader2 = _interopRequireDefault(_vuxLoader);

var _autoprefixer = require('autoprefixer');

var _autoprefixer2 = _interopRequireDefault(_autoprefixer);

var _config = require('./config.js');

var _config2 = _interopRequireDefault(_config);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

// import TextReplacePlugin from './plugin/TextReplacePlugin.js';

// 字符替换loader，替换全局环境变量
var replaceLoader = {
  loader: _path2.default.resolve(__dirname + '/loader/replace-loader.js'),
  options: {
    replacer: function () {
      var replacer = _extends({}, _config2.default.replacer);
      delete replacer.regex;
      return replacer;
    }()
  }
};

/*// 根据当前编译参数修改vue模块的入口js指向
var vuePackageJsonPath = '../../vue/package.json';
var vuePackageJson = require(vuePackageJsonPath);
var targetVue = 'dist/vue.js';
if (config.env) {
  targetVue = 'dist/vue.min.js';
}
if(vuePackageJson.main !== targetVue || vuePackageJson.module !== targetVue) {
  vuePackageJson.main = vuePackageJson.module = targetVue;
  fs.writeFileSync(__dirname + '/' + vuePackageJsonPath, JSON.stringify(vuePackageJson, ' ', 2), {flag: 'w'}, function (err) {
    if (err) {
      throw new Error(err);
    }
  });
}*/

// 解决 vue-lazyload 编译报错问题
var vuePackageJsonPath = __dirname + '/../../vue-lazyload/.babelrc';
var data = _fs2.default.readFileSync(vuePackageJsonPath, { encoding: 'utf-8' });
var vueLazyloadJson = JSON.parse(data);
// vueLazyloadJson.plugins = [];
vueLazyloadJson = {};
console.log(vueLazyloadJson);
_fs2.default.writeFileSync(vuePackageJsonPath, JSON.stringify(vueLazyloadJson, ' ', 2), { flag: 'w' });

var json = {
  entry: {},
  output: {},
  module: {
    rules: [{
      test: _config2.default.pkg.name == 'm' ? /\.(js|es6)$/ : /\.js$/,
      use: [{
        loader: 'babel-loader',
        options: _config2.default.babel
      }, replaceLoader]
    }, {
      test: /\.vue$/,
      use: [{
        loader: 'vue-loader',
        options: {
          postcss: [(0, _autoprefixer2.default)(_config2.default.autoprefixer)],
          loaders: {
            js: [{
              loader: 'babel-loader',
              options: _config2.default.babel
            }]
          }
        }
      }, replaceLoader]
    }, {
      test: /\.json$/,
      use: [{ loader: 'json-loader' }, replaceLoader]
    }, {
      test: /\.(scss|css)$/,
      use: [{ loader: 'style-loader' }, { loader: 'css-loader' }, {
        loader: 'postcss-loader',
        options: {
          plugins: [(0, _autoprefixer2.default)(_config2.default.autoprefixer)]
        }
      }, { loader: 'sass-loader' }]
    }, { test: /\.(png|jpg|jpeg|gif|svg)$/, use: [{ loader: 'url-loader' }] }]
  },
  plugins: [],
  externals: {},
  resolve: {
    alias: {
      vue: process.env.mini === 'true' ? 'vue/dist/vue.min.js' : 'vue/dist/vue.js'
    }
  }
};

// 只有m项目支持VUX
if (_config2.default.pkg.name == 'm') {
  // vue组件中引用其他模块不加文件后缀（这样做不好），为了兼容才做此设置
  json.resolve.extensions = ['.js', '.vue', '.json'];

  // 增加一些plugin辅助加载vux
  json = _vuxLoader2.default.merge(json, {
    plugins: ['vux-ui']
  });
}

exports.default = json;