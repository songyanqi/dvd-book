import Cookies from 'js-cookie';
import ua from 'dvd-base-js-ua';
import util from 'dvd-service-js-util';
import runtime from 'dvd-base-js-runtime';
import native from 'dvd-service-js-native';

/**
 * @module dvd-service-js-login
 * @author swg [源码地址](http://gitlab.rd.vyohui.com/FE-Service/dvd-service-js-login.git)
 */
export default {
    /**
     * @method
     * 功能: get dvdsid
     */
    getDvdsid({req} = {}) {
        let dvdsid = req ? req.cookies.dvdsid : Cookies.get('dvdsid');
        return Object.prototype.toString.call(dvdsid) === '[object String]' ? dvdsid : '';
    },
    /**
     * 功能: 用户是否已登录
     * 说明: dvdsid第33-39位如果是7个0为未登录
     */
    isLogined({req} = {}) {
        let dvdsid = this.getDvdsid({req});
        let token = Cookies.get('token');
        console.log("-----------------------------", dvdsid, token);
        return (dvdsid && dvdsid.substr(32, 7) !== '0000000') || (token && token != "");
    },
    /**
     * 功能: 获取session id
     * 说明: 取dvdsid前32位
     */
    getSessionId() {
        return this.getDvdsid().substr(0, 32);
    },
    /**
     * 功能: 获取userId
     * 说明: 取dvdsid第33-39位,并转为10进制
     */
    getUserId() {
        let sessionId = this.getDvdsid().substr(32, 7);
        return sessionId ? parseInt(sessionId, 16) : '';
    },
    /**
     * 功能: 获取用户身份
     * 说明: 取dvdsid第40位
     */
    getUserStatusCode({req} = {}) {
        return this.getDvdsid({req}).substr(39, 1);
    },
    /**
     * 功能: 跳转到登录页，登录后返回
     * 说明: 调用此方法说明当前页面需要登录，如果未登录跳转登录页
     * @param param.success {Function} app中登录成功回调
     * @param param.error {Function} app中登录失败或者取消登录回调
     */
    goLoginPage(param) {
        if (ua.isDvdApp()) {
            native.Account.login(param);
        } else {
            let url = "/wxlogin/wechatlogin.html";

            if (!ua.isWeiXin()) {
                url = '/login.html';
            }
            location.replace(url + '?referer=' + encodeURIComponent(location.href));
            throw new Error(`即将跳转登录页(${location.href})，已主动抛出异常中断当前页面js执行，请忽略此异常信息~`);
        }
    },
    /**
     * 功能: 自动跳转登录页
     * 说明: 调用此方法说明当前页面需要登录，如果未登录跳转登录页
     */
    needLogin(param) {
        if (!this.isLogined()) {
            this.goLoginPage(param);
            return true;
        }
        return false;
    },

    /**
     * 功能: 登录
     * @param param {Object} 复合参数
     * @param param.reload 登录成功后是否刷新页面
     * @param param.url 登录成功后的回跳地址
     * @param param.failUrl 登录失败后的回跳地址
     * @param param.urlParam {Object} 跳到登录页url后面的附带的参数（复合参数，key-value形式，每一项被转化成&xxx=xxx形式）
     */
    login(param = {}) {
        // 登录成功后是否刷新页面
        param.reload = param.reload !== undefined ? param.reload : true;

        // 如果已登录则不继续执行
        if (this.isLogined()) {
            // 如果有url则跳转url
            if (param.url) {
                if (param.open) {
                    util.open(param.url);
                    native.Browser.open({
                        url: param.url,
                    });
                } else {
                    location.href = param.url;
                }
            }
            return;
        }

        if (ua.isDvdApp()) {
            // 唤起app登录
            native.Account.login({
                success() {
                    if (param.url) {
                        if (param.url.indexOf('/') === 0) {
                            // 若果url是/xxx.html格式，则url前面自动补全协议和域名
                            param.url = `${location.protocol}//${location.host}${param.url}`;
                        }
                        // 需要app把登录后的强制刷新当前页去掉才能生效
                        if (param.open) {
                            util.open(param.url);
                        } else {
                            location.href = param.url;
                        }
                        throw new Error(`即将跳转${param.url}，已主动抛出异常中断当前页面js执行，请忽略此异常信息~`);
                        // native.Browser.open({
                        //   param.url,
                        // });
                    } else {
                        if (param.reload) {
                            location.reload();
                        }
                    }
                },
                error() {
                    if (param.failUrl) {
                        location.href = param.failUrl;
                    }
                }
            });
        } else {
            let queryString = '';
            if (param.urlParam) {
                for (let i in param.urlParam) {
                    queryString += `&${i}=${param.urlParam[i]}`
                }
            }

            // 登录成功回跳地址
            param.url = param.url || location.href;

            // 跳转H5登录页
            let url = "/wxlogin/wechatlogin.html";

            if (!ua.isWeiXin()) {
                url = '/login.html';
            }
            location.replace(url + '?referer=' + encodeURIComponent(param.url) + queryString);
        }
        throw new Error(`即将跳转登录页(登录成功后回跳地址为：${param.url})，已主动抛出异常中断当前页面js执行，请忽略此异常信息~`);
    },
    /**
     * 功能: 是否是已登录的买家
     */
    isBuyer() {
        return this.isLogined() && this.getUserStatusCode() === '1';
    },
    /**
     * 功能: 是否是已登录的卖家
     */
    isSeller({req} = {}) {
        return this.isLogined({req}) && this.getUserStatusCode({req}) === '3';
    },

    /**
     * 兼容server端和client端的进入页面前检测登录方法，可在ssr项目中router的beforeEnter方法中使用
     * @param to
     * @param from
     * @param next
     */
    ssrLogin({next, req, res, referrer}) {
        if (this.isLogined({req})) {
            next();
            return;
        }

        // 去登录页
        if (runtime.isServer()) {
            let referrer = referrer || req.url;
            if (referrer && referrer.startsWith('/')) {
                referrer = `${req.protocol}://${req.hostname}${referrer}`;
            }
            let url = "/wxlogin/wechatlogin.html";

            if (!ua.isWeiXin(req.headers["user-agent"])) {
                url = '/login.html';
            }
            res.redirect(url + '?referer=' + encodeURIComponent(referrer));
        } else {
            let referrer = referrer || location.href;
            if (referrer && referrer.startsWith('/')) {
                referrer = `${location.protocol}://${location.host}${referrer}`;
            }
            this.login({
                url: referrer
            });
        }
    }
};
