'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _https = require('https');

var _https2 = _interopRequireDefault(_https);

var _url = require('url');

var _url2 = _interopRequireDefault(_url);

var _querystring = require('querystring');

var _querystring2 = _interopRequireDefault(_querystring);

var _dvdBaseJsRuntime = require('dvd-base-js-runtime');

var _dvdBaseJsRuntime2 = _interopRequireDefault(_dvdBaseJsRuntime);

var _cookieParser = require('cookie-parser');

var _cookieParser2 = _interopRequireDefault(_cookieParser);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function objectToCookieStr(cookies) {
  var result = '';

  if (cookies) {
    var count = 0;

    // 拼接字符串
    for (var i in cookies) {
      result += i + '=' + cookies[i] + '; ';
      count++;
    }

    // 去掉末尾多余分隔符
    if (count > 0) {
      result = result.substr(0, result.length - 2);
    }
  }
  return result;
}

/**
 * 服务端发送http(s)模块
 * @param options {} 同jquery参数
 */
exports.default = {
  send: function send() {
    var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
    var req = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

    return new Promise(function (resolve, reject) {
      try {
        options = _extends({}, {
          type: 'get',
          url: '',
          dataType: 'json',
          data: {},
          success: function success() {},
          error: function error(err) {
            console.log(err.message + '\n' + err.stack);
          }
        }, options);

        // url转为目标location对象
        var location = _url2.default.parse(options.url);

        // url参数与data参数合并，data参数优先级高
        var data = _extends({}, _querystring2.default.parse(location.query), options.data);

        // post方法请求体
        var body = Object.prototype.toString.call(options.data) == '[object Object]' ? _querystring2.default.stringify(options.data) : options.data.toString();
        // 设置请求
        var request = _https2.default.request({
          method: options.type,
          host: location.host,
          port: location.port,
          path: !options.type || options.type.toLowerCase() == 'get' ? location.path.replace(location.search, '') + '?' + _querystring2.default.stringify(data) : location.path,
          headers: options.type.toLowerCase() == 'post' ? {
            'Content-Type': 'application/x-www-form-urlencoded; charset=UTF-8', // 如果content格式为a=1&b=2，则应设置application/x-www-form-urlencoded; 还可以是application/json
            'Content-Length': body.length,
            'Cookie': _dvdBaseJsRuntime2.default.isServer() && objectToCookieStr(req.cookies) || _dvdBaseJsRuntime2.default.isClient() && document.cookie || ''
          } : {}
        }, function (res) {
          // 保存全部数据
          var total = '';

          // 数据编码
          res.setEncoding('utf8');

          // 接收到数据段落
          res.on('data', function (data) {
            // console.log(`接收到数据片段：${data}`)
            total += data;
          });

          // 全部数据接收完毕
          res.on('end', function () {
            if (options.dataType.toLowerCase() == 'json') {
              total = JSON.parse(total);
            }
            console.log('\u63A5\u6536\u5230\u5B8C\u6574\u6570\u636E\u7247\u6BB5\uFF1A' + (options.dataType.toLowerCase() == 'json' ? JSON.stringify(total, ' ', 2) : total));
            resolve(total);
          });
        });

        // 错误回调
        request.on('error', function (err) {
          console.error(err);
          reject(err);
        });

        // post请求写入数据
        if (options.type.toLowerCase() == 'post') {
          // console.log(`即将请求post方法的body数据是：${body}`);
          request.write(body + '\n');
        }

        // 发送请求
        console.log(request);
        request.end();
      } catch (err) {
        console.error(err);
      }
    });
  }
};