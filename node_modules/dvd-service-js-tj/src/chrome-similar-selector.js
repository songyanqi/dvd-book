/**
	 * 转义选择器
	 * @param  {String} selector 要转义的选择器
	 * @return {String}          转头后的选择器
	 */
function escapeSelector(selector) {
  return selector.replace(/([!"#$%&'()*+,./:;<=>?@[\\\]^`{|}~])/g, '\\$1');
}

/**
 *
 * @param {String} selector [选择器]
 * @param {NodeList} doc [节点数组]
 * @return {NodeList}
 */
function findElm(selector, doc) {
  var resultList = [], nativeList, i, j;
  if (typeof selector === 'string') {
    if (doc) {
      for (i = doc.length - 1; i >= 0; i--) {
        nativeList = doc[i].querySelectorAll(selector);

        if (nativeList) {
          for (j = nativeList.length - 1; j >= 0; j--) {
            resultList.push(nativeList[j]);
          }
        }
      }
    } else {
      nativeList = document.querySelectorAll(selector);
      if (nativeList) {
        for (i = nativeList.length - 1; i >= 0; i--) {
          resultList.push(nativeList[i]);
        }
      }
    }
  } else {
    resultList.push(selector);
  }
  return resultList;
}

/**
 * 获取位置
 */
function getIndex(el) {
  var index = 0, i, brother;
  if (el) {
    brother = el.parentNode.children;
    for (i = 0; i < brother.length; i++) {
      if (el === brother[i]) {
        index = i;
      }
    }
  }
  return index;
}

/**
 * id在编辑页面是否唯一
 * @param  {Document} doc [元素的对应document]
 * @param  {String}   id  [元素id]
 * @return {Boolean}
 */
function idUnique(doc, id) {
  return findElm('[id="' + id + '"]', findElm(doc)).length === 1;
}

/**
 * 获取元素的tagName
 * @param  {Element} el [元素节点]
 * @return {String}     [tagName小写]
 */
function getEleTagName(el) {
  var tagName = el && el.tagName && el.tagName.toLowerCase() || 'document';
  return tagName.toLowerCase();
}

function selectorEleCount(doc, selector) {
  var childs = findElm(selector, findElm(doc));
  return childs.filter(function(x) {
    return x.parentNode === doc;
  }).length;
}

/**
 * 获取元素的class选择器信息
 * @param  {Element} el [元素节点]
 * @return {Object}     [属性selector为最优class选择器(选择元素最少)， unique表示该class选择器的唯一性]
 */
function getClassSelector(el) {
  var selector,
    clazz,
    selectorCount,
    returnValue = {},
    className = el.className,
    tagName = getEleTagName(el);

  returnValue.selector = '';
  if (className && tagName) {
    selector = '' + tagName;
    clazz = className.split(/\s+/).pop();
    if (clazz && clazz.length && clazz.indexOf('swiper-slide-') < 0) {
      selector += '.' + clazz;
    }
    returnValue.selector = selector;
    selectorCount = selectorEleCount(el.parentNode, selector);
  }
  returnValue.unique = selectorCount === 1;
  return returnValue;
}

/**
 * 获取元素的tag选择器信息
 * @param  {Element} el [元素节点]
 * @return {Object}     [属性selector为tag选择器， unique表示该tag选择器的唯一性]
 */
function getTagSelector(el) {
  var selector,
    selectorCount,
    returnValue = {},
    tagName = getEleTagName(el);

  if (tagName) {
    selector = '' + tagName;
    returnValue.selector = selector;
    selectorCount = selectorEleCount(el.parentNode, selector);
  }

  returnValue.unique = selectorCount === 1;
  return returnValue;
}

/**
 * 递归获取元素选择器
 * @param  {Node or jQuery} el       [节点元素]
 * @param  {Array}          selector [选择器数组]
 * @return {Array}                   [选择器数组]
 */
function getSelectorRecursive(el, selector) {
  var id,
    tagSelectorInfo,
    classSelectorInfo,
    tagName = getEleTagName(el);

  if (!el) {
    return selector;
  }
  if (tagName === 'body') {
    selector.unshift('body');
    return selector;
  }
  id = el.id;
  if (id && idUnique(el.ownerDocument, id)) {
    selector.unshift('#' + escapeSelector(id));
    return selector;
  }

  tagSelectorInfo = getTagSelector(el);
  if (tagSelectorInfo.selector && tagSelectorInfo.unique) {
    selector.unshift(tagSelectorInfo.selector);

    // 如果已经是唯一了就返回吧
    if (document.querySelectorAll(selector.join(' > ')).length === 1) {
      return selector;
    }
  } else {
    classSelectorInfo = getClassSelector(el);
    if (classSelectorInfo.selector && classSelectorInfo.unique) {
      selector.unshift(classSelectorInfo.selector);

      // 如果已经是唯一了就返回吧
      if (document.querySelectorAll(selector.join(' > ')).length === 1) {
        return selector;
      }
    } else {
      selector.unshift(getEleTagName(el) +
        ':nth-child(' + (getIndex(el) + 1) + ')');
    }
  }



  return getSelectorRecursive(el.parentNode, selector);
}

/**
 * 获取节点的唯一jquery选择器
 * @param  {Node or jQuery} el  [传入的节点]
 * @return {String}             [返回选择器]
 */
function getSelector(el) {
  var selector;
  selector = getSelectorRecursive(el, []);
  return selector.join('>');
}

export default getSelector;
