// url正则，用于获取url中各部分信息
const UrlReg = /^((?:http|https):)?(?:\/\/)?(([^:/]*)?(?::(\d+))?)?(\/[^?]*)?(\?[^#]*)?(#.*)?$/;

/**
 * @module dvd-base-js-param
 * @author sunweiguang [源码地址](http://gitlab.rd.vyohui.com/FE-Base/dvd-base-js-param.git)
 */
export default {
  /**
   * 将url转成window.location对象
   * @param url {String}
   * @returns {{}} 如果传url参数，则返回与window.location相同格式的对象；如果不传url参数，则直接返回window.location
   */
  getLocation(url) {
    if (url) {
      let result = UrlReg.exec(url);
      return {
        href: result[0],
        protocol: result[1],
        host: result[2],
        hostname: result[3],
        port: result[4],
        pathname: result[5],
        search: result[6],
        hash: result[7],
      }
    } else {
      return window.location;
    }
  },
  /**
   * 将字符串转换为对象
   * @param searchStr {String} location.search格式的字符串，如:'?a=1&b=2&c=3'
   * @returns {{}} 比如{a:1,b:2,c:3}
   */
  toObj(searchStr) {
    let obj = {};
    searchStr = searchStr || location.search.split('?')[1];
    if (searchStr) {
      let paramMapArr = searchStr.split("&");
      for (let i in paramMapArr) {
        let paramMap = paramMapArr[i].split("=");
        obj[paramMap[0]] = paramMap[1] || '';
      }
    }
    return obj;
  },
  /**
   * 将对象转换为字符串，与toObj方法相反
   * @param searchObj {{}} 比如{a:1,b:2,c:3}
   * @returns {String} location.search格式的字符串，如:'?a=1&b=2&c=3'
   */
  toStr(searchObj) {
    let str = '';
    if (searchObj) {
      for (let i in searchObj) {
        str += '&' + i + '=' + searchObj[i];
      }
    }
    return str.substr(1);
  },
  /**
   * 获取url中的所有参数
   * @param url {String} 默认取当前页面url
   * @returns {{}}
   */
  getAll(url) {
    let location = this.getLocation(url);
    let searchStr = location.search ? location.search.split("?")[1] : location.search;
    return this.toObj(searchStr);
  },
  /**
   * 获取url中的某个参数
   * @param name {String} 参数名称
   * @param url {String} 默认取当前页面url
   * @returns {*}
   */
  get(name, url) {
    if (name) {
      return this.getAll(url)[name];
    } else {
      throw new Error('name参数不能为空');
    }
  },
  /**
   * 替换url中的某个参数
   * @param map {{}} 包含需要替换的key/value
   * @param url {String} 被替换的url，默认取当前页面url
   * @returns {string}
   */
  replace(map, url) {
    url = url || location.href;
    if (map) {
      let obj = this.getAll(url);
      for (let i in map) {
        obj[i] = map[i];
      }
      return url.split("?")[0] + '?' + this.toStr(obj);
    } else {
      throw new Error('map参数不能为空');
    }
  },
};
